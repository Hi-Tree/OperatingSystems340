1.14) What is the purpose of interrupts? How does an interrupt differ from a trap? Can traps be generated intentionally by a user program? If so, for what purpose?

 Answer: An interrupt (eg., generated by I/O device controllers) is a hardware-generated change of flow (of control) within the system.

 An interrupt handler is summoned to deal with the cause of the interrupt; control is then returned to the interrupted context and instruction.

 A trap is a software-generated interrupt. A trap can be used to call operating system routines (functions).  Operating system calls provide an interface to the services provided by an OS but they run in kernel mode and can be expensive due to switches between User and Kernel mode. 


1.16)

 Direct memory access is used for high-speed I/O devices in order to avoid increasing the CPU’s execution load. 

a. How does the CPU interface with the device to coordinate the transfer? 

b. How does the CPU know when the memory operations are complete? 

c. The CPU is allowed to execute other programs while the DMA controller is transferring data. Does this process interfere with the execution of the user programs? If so, describe what forms of interference are caused. 

Answer: The CPU can initiate a DMA operation by writing values into special registers (via the Device Driver Lib)that can be independently accessed by the device. 

The device initiates the corresponding operation once it receives a command from the CPU. When the device is finished with its operation, it interrupts the CPU to indicate the completion of the operation. 

Both I/O devices and the CPU can be accessing memory simultaneously. The memory controller provides access to the memory bus in a fair manner to these entities. A CPU might therefore be unable to issue memory operations at peak speeds, since it has to compete with I/O devices in order to obtain access to the memory bus.

1.19) See lecture notes, lecture slide, and texbook Fig. 1.6.